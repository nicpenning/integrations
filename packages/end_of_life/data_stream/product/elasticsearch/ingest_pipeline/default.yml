---
description: Pipeline for parsing the End of Life Products
processors:
  ####################
  # Event ECS fields #
  ####################
  - set:
      field: ecs.version
      value: '9.1.0'
  - fail:
      tag: data_collection_error
      if: ctx.error?.message != null && ctx.message == null && ctx.event?.original == null
      message: error message set and no data to process.
  - set:
      field: event.kind
      value: enrichment
  - set:
      field: event.category
      value: [vulnerability]
  - set:
      field: event.type
      value: [info]

  ######################
  # General ECS fields #
  ######################
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  #- json:
  #    field: event.original
  #    target_field: end_of_life
  - date:
      field: end_of_life.releases.eoasFrom
      formats:
        - YYYY-MM-DD
      if: ctx.end_of_life?.releases?.eoasFrom != null
      target_field: end_of_life.releases.eoasFrom
  - date:
      field: end_of_life.releases.eolFrom
      formats:
        - YYYY-MM-DD
      if: ctx.end_of_life?.releases?.eolFrom != null
      target_field: end_of_life.releases.eolFrom
  - date:
      field: end_of_life.releases.latest.date
      formats:
        - YYYY-MM-DD
      if: ctx.end_of_life?.releases?.latest?.date != null
      target_field: end_of_life.releases.latest.date
  - date:
      field: end_of_life.releases.releaseDate
      formats:
        - YYYY-MM-DD
      if: ctx.end_of_life?.releases?.releaseDate != null
      target_field: end_of_life.releases.releaseDate
  ######################
  # Cleanup processors #
  ######################
  - script:
      description: Remove null/empty values recursively.
      lang: painless
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
      tag: 'Remove null/empty values recursively.'
      on_failure:
        - append:
            field: error.message
            value: "fail-{{{ _ingest.on_failure_processor_tag }}}"
        - fail:
            message: "Processor {{{ _ingest.on_failure_processor_type }}} with tag {{{ _ingest.on_failure_processor_tag }}} in pipeline {{{ _ingest.on_failure_pipeline }}} failed with message: {{{ _ingest.on_failure_message }}}"

on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
